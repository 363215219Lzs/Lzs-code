// 6. fre-cox
library(readr)
C<- read_csv("~/Desktop/C_sample_con.csv")[,-1]
C0<-c(rep(0,7))
for(kk in 1:(K+1)){
  kk<-1
  J<-c(rep(kk,dim(C[[kk]])[1]))
  C1<-cbind(C[[kk]],J)
  C0<-rbind(C0,C1)
}
C0<-C0[-1,]

m<-4 
HR_Fre<-matrix(0,m,3)
library(survival)
for(m in c(1:4)){
  data0<-C0[which(C0$m==m),]
  data<-list(y=data0$y,group=data0$X,delta=data0$sigema)
  res.cox <- coxph(Surv(y, delta) ~ group, data = data)
  sum<-summary(res.cox)
  HR_Fre[m,]<-cbind(sum$coefficients[2],sum$conf.int[3],sum$conf.int[4])
}

colnames(HR_Fre)<-c("HR","low","upr")
write.csv(HR_Fre,"~/Desktop/HR_fre_con.csv")#_con,_var,_norm
~~~~~~~~


// 7. time-varying cox (contimuous function)
install.packages(c("survival", "survminer"))
library("survival")
library("survminer")
HR_TV<-matrix(0,K,m)
HR_TV_low<-matrix(0,K,m)
HR_TV_upr<-matrix(0,K,m)

for(m in c(1:4)){ 
  data0<-C0[which(C0$m==m),]
  data<-list(y=data0$y,group=data0$X,delta=data0$sigema)
  fit<- coxph(Surv(y, delta) ~ group+tt(group), data = data,tt =function(x,int,...) x * log(int))
  sum<-summary(fit)
 HR_TV[,m]<-exp(sum$coefficients[1,1]+sum$coefficients[2,1]*log(int))
 HR_TV_low[,m]<-exp(log(sum$conf.int[1,3])+log(sum$conf.int[2,3])*log(int))
 HR_TV_upr[,m]<-exp(log(sum$conf.int[1,4])+log(sum$conf.int[2,4])*log(int))
}

HR_TV<-cbind(HR_TV,HR_TV_low,HR_TV_upr)
write.csv(HR_TV,"~/Desktop/HR_TV_con.csv")#_con,_var,_norm
~~~~~~~~


// 8.regularize and fit Estimated value<p>
/// 8.1 Filter,Normalize,Average 
beta_post_1<- read_csv("~/Desktop/beta_bcmc_con.csv")
HR_cox <- read_csv("~/Desktop/HR_fre_con.csv")[,-1]
HR_TV <- read_csv("~/Desktop/HR_TV_con.csv")[,-1]
beta <- read_csv("~/Desktop/beta_true_con.csv")[,-1]
beta_post_11<-c(beta_post_1$mean,beta_post_1$upr)
x<-c(0:(length(int)*2))
beta_post<-as.data.frame(x)
be<-c(0)

for(m in 1:4){
  for(t in 1:(length(int)*2)){
  row<-m+4*(t-1)
  be<-c(be,beta_post_11[row])#mean
  }
  beta_post<-cbind(beta_post,be)
  be<-c(0)
}
beta_post<-beta_post[-1,]
colnames(beta_post)<-c("x","y1","y2","y3","y4")
summary(beta_post)
dim(beta_post)
beta_post$y1f<-beta_post$y1
beta_post$y2f<-beta_post$y2
beta_post$y3f<-beta_post$y3
beta_post$y4f<-beta_post$y4

fan<-cbind(1:length(int),(1:length(int))+length(int))
for(m in 1:4){
ci<-beta_post[fan[,2],m+1]-beta_post[fan[,1],m+1]
ci[which(ci>3)]<-3
beta_post[fan[,2],m+5]<-ci
}
summary(beta_post[fan[,2],])

#Removal of extremes
for(m in 1:4){
  up<-quantile(beta_post[fan[,1],m+1], 0.975)
  lw<-quantile(beta_post[fan[,1],m+1], 0.025)
for(t in fan[-1,1]){
  beta_post[t,m+5]<-ifelse(beta_post[t,m+1]<=up&beta_post[t,m+1]>=lw,beta_post[t,m+1],beta_post[t-1,m+5])
}
  }

#normalization
stan1<-HR_cox[4,1]
redu<-abs(log(stan1)/mean(beta_post$y4f[fan[,1]]))
for(m in 1:4){
  beta_post[fan[,1],m+5]<-beta_post[fan[,1],m+5]*redu
}

#average
for(l in 1:2){  
for(m in 1:4){
for(t in fan[,l]){
  beta_post[t,m+9]<-(mean(beta_post[(max(min(fan[,l]),(t-5))):(min(max(fan[,l]),(t+5))),m+5]/2))
}
}
}

plot(int, beta_post$V10[fan[,1]], type="l", col="steelblue2" , xlab="Weeks",ylab="beta",ylim=c(-4,4),main="Time-varying beta (After filtering)",bty="l",lwd=1)#range(beta_post$V10,na.rm=TRUE)
lines(int, beta_post$V11[fan[,1]], type="l", col="purple",lwd=1)
lines(int, beta_post$V12[fan[,1]], type="l", col="palegreen3",lwd=1)
lines(int, beta_post$V13[fan[,1]], type="l", col="gold1",lwd=1)
lines(int, rep(0,length(int)), lty=2, col="black",lwd=1)
legend("topright", legend=c("PFS-PD", "PD-PFS", "PFS-D", "PD-D","beta=0"), col=c("steelblue1", "purple", "palegreen3", "gold1","black"), lty=c(1,1,1,1,2), cex=0.8,lwd=1.5,bty="n")

beta_post<-beta_post[,10:13]
write.csv(beta_post,"~/Desktop/beta_stan_con.csv")
~~~~~~~~


// 8.2 weibull fit and 95%CI
#weibull fit
library(readr)
beta_post <-read_csv("~/Desktop/beta_stan_con.csv")[,-1]
staus<-c("var")#con,var,norm
bcmc_wei<-list()
length(int)
fan<-cbind(1:length(int),(1:length(int))+length(int))


library (MASS)
for(m in 1:4){
fit_num<-c((1:8)*7,57:length(int))
y1<-beta_post[fan[,1],m]
y0<-exp(y1)
y_fit<-data.frame(matrix(0,k,3))
y<-y0[fit_num]
 if ((m==1)|(m==3)|(m==4)) {y[which(y>1)]<-1}
   if (m==2) {y[which(y<1)]<-1}
y<-y-1
inter<-1
redu<-sum(y)*inter/2
y<-y/redu
sum(y*inter)#=1
X<-sample(1:(k)-0.5,10000,prob=y,replace = TRUE)
fit<-fitdistr(X, "Weibull")
shape<-fit[["estimate"]][1]
scale<-fit[["estimate"]][2]
t<-c(1:k)
fitting<-dweibull(t, shape = shape, scale = scale)
y_fit[,1]<-fitting*(redu)+1
if((m==1)){plot(t, y_fit[,1], type="l", col="steelblue2", ylim=c(0,4), xlab="Week", ylab="beta", main="Time-varying beta")}
lines(t,rep(0.5,260))
if((m==2)|(m==3)|(m==4)){lines(t, y_fit[,1], type="l", col="steelblue2", ylim=c(0,4), xlab="Week", ylab="beta", main="Time-varying beta")}
bcmc_wei[[m]]<-y_fit
}

#95%ci
library(foreach)
library(iterators)
library(parallel)
library(doParallel)
z<-1.96
n0<-2500
staus<-c("con")
staus<-c("var")
staus<-c("norm")
dat_all<-list()
for(m in 1:4){
y_95<-matrix(NA,nrow=n0,ncol=length(int))
mean<-exp(beta_post[fan[,1],m])
upr<-exp(beta_post[fan[,1],m]+beta_post[fan[,2],m])
sd0<-(upr-mean)/z*((n0)^(1/2))
for(col in 1:length(int)){
y_95[,col]<-rnorm(n0,mean=as.numeric(mean[col]),sd=as.numeric(sd0[col]))
}
fitting<-matrix(NA,nrow=n0,ncol=k)
  cl <- makeCluster(n.cores-1) 
registerDoParallel(cl)
fitting<-foreach(nn = 1:n0,
               .combine = rbind,
               .packages = c("MASS"),
               .errorhandling = "pass") %dopar% {
                 y<-y_95[nn,fit_num]
   base<-1+mean(y)-mean(as.vector(mean[1])[[1]])
  if ((m==1)|(m==3)|(m==4)) {y[which(y>base)]<-base}
 if (m==2) {y[which(y<base)]<-base}
y<-y-base
inter<-1
redu<-sum(y)*inter/1
y<-y/redu
sum(y*inter)#=1
length(y)
X<-sample(1:(k),10000,prob=y,replace = TRUE)
fit<-fitdistr(X, "Weibull")
shape<-fit[["estimate"]][1]
scale<-fit[["estimate"]][2]
t<-c(1:k)
weibull<-dweibull(t, shape = shape, scale = scale)


#plot(weibull)
#lines(weibull)
weibull<-weibull*(redu)+base
return(weibull)
}
stopCluster(cl)
y_upr<-c()
y_lwr<-c()
  for(col in 1:(k)){
  fitt<-as.numeric(unlist((fitting[,col])))
y_upr[col]<-quantile(fitt, 0.975,na.rm=TRUE)
y_lwr[col]<-quantile(fitt, 0.025,na.rm=TRUE)
  }
stan<-((bcmc_wei[[m]][,1])-1)/((max(y_upr)+min(y_lwr))/2-1)
base_1<-mean(1-bcmc_wei[[m]][,1])
y_upr_1<-(y_upr-1)*stan+1+base_1
y_lwr_1<-(y_lwr-1)*stan+1-base_1

t<-1:(k)
plot(t, bcmc_wei[[m]][,1], type="l", col="steelblue2", ylim=c(0,3), xlab="Week", ylab="beta", main="Time-varying beta")
lines(t,y_upr_1,type="l")
lines(t,y_lwr_1,type="l")
lines(t,rep(0.5,k),type="l")
bcmc_wei[[m]][,2]<-y_upr_1
bcmc_wei[[m]][,3]<-y_lwr_1
min(y_lwr)
colnames(bcmc_wei[[m]])<-c("bcmc","bcmc_lwr","bcmc_upr")
y_cox<-cbind(rep(as.numeric(HR_cox[m,1]),length(t)),rep(as.numeric(HR_cox[m,2]),length(t)),rep(as.numeric(HR_cox[m,3]),length(t)))
colnames(y_cox)<-c("cox","cox_lwr","cox_upr")
y_tv<-cbind(HR_TV[,m],HR_TV[,m+4],HR_TV[,m+8])[c((1:8)*7,57:308),]
colnames(y_tv)<-c("tv","tv_lwr","tv_upr")
y_true<-t(exp(beta[m,]))
x<- data.frame(x = t)
dat_all[[m]]<-cbind(x,bcmc_wei[[m]],y_cox,y_tv,y_true)
}
dat_weibull<-dat_all
~~~~~~~~


// 8.3 linear fit and 95%ci
#linear fit
library(readr)
beta_post <- read_csv("~/Desktop/beta_stan_con.csv")[,-1]
library (MASS)
bcmc_lin<-list()
y_fit<-data.frame(matrix(0,length(int),3))
for(m in 1:4){
y1<-beta_post[fan[,1],m]
y0<-exp(y1)
dat_fit<-as.data.frame(cbind(y0,int))
colnames(dat_fit)<-c("y0","int")
fit<-lm(y0~int,data=dat_fit)
y_fit[,1]<-fitted(fit)
if((m==1)){plot(int, y_fit[,1], type="l", col="steelblue2", ylim=c(0,4), xlab="Week", ylab="beta", main="Time-varying beta")}
lines(t,rep(0.5,260))
if((m==2)|(m==3)|(m==4)){lines(int, y_fit[,1], type="l", col="steelblue2", ylim=c(0,4), xlab="Week", ylab="beta", main="Time-varying beta")}
bcmc_lin[[m]]<-y_fit[fit_num,]
}

z<-1.96
n0<-2500
dat_all<-list()
for(m in 1:4){
y_95<-matrix(NA,nrow=n0,ncol=length(int))
mean<-exp(beta_post[fan[,1],m])
upr<-exp(beta_post[fan[,1],m]+beta_post[fan[,2],m])
sd0<-(upr-mean)/z*((n0)^(1/2))
for(col in 1:length(int)){
y_95[,col]<-rnorm(n0,mean=as.numeric(mean[col]),sd=as.numeric(sd0[col]))
}
fitting<-matrix(NA,nrow=n0,ncol=k)
  cl <- makeCluster(n.cores-1) 
registerDoParallel(cl)
fitting<-foreach(nn = 1:n0,
               .combine = rbind,
               .packages = c("MASS"),
               .errorhandling = "pass") %dopar% {
                 y1<-y_95[nn,]
y0<-y1
dat_fit<-as.data.frame(cbind(y0,int))
colnames(dat_fit)<-c("y0","int")
fit<-lm(y0~int,data=dat_fit)
fitted<-fitted(fit)[fit_num]
return(fitted)
}
stopCluster(cl)
  for(col in 1:(k)){
  fitt<-as.numeric(unlist((fitting[,col])))
y_upr[col]<-quantile(fitt, 0.975,na.rm=TRUE)
y_lwr[col]<-quantile(fitt, 0.025,na.rm=TRUE)
  }
base_1<-max(bcmc_lin[[m]][,1])
stan_1<-(bcmc_lin[[m]][,1]-base_1)/((y_upr)+(y_lwr)/2-base_1)
y_upr_1<-(y_upr-base_1)*stan_1+base_1
y_lwr_1<-(y_lwr-base_1)*stan_1+base_1


#m<-1,0.2
t<-1:(k)
plot(t, bcmc_lin[[m]][,1], type="l", col="steelblue2", ylim=c(0,4), xlab="Week", ylab="beta", main="Time-varying beta")
lines(t,y_upr_1,type="l")
lines(t,y_lwr_1,type="l")
lines(t,rep(1,k),type="l")
bcmc_lin[[m]][,2]<-y_upr_1
bcmc_lin[[m]][,3]<-y_lwr_1
colnames(bcmc_lin[[m]])<-c("bcmc","bcmc_lwr","bcmc_upr")
y_cox<-cbind(rep(as.numeric(HR_cox[m,1]),length(t)),rep(as.numeric(HR_cox[m,2]),length(t)),rep(as.numeric(HR_cox[m,3]),length(t)))
colnames(y_cox)<-c("cox","cox_lwr","cox_upr")
y_tv<-cbind(HR_TV[,m],HR_TV[,m+4],HR_TV[,m+8])[fit_num,]
colnames(y_tv)<-c("tv","tv_lwr","tv_upr")
y_true<-t(exp(beta[m,]))
x<- data.frame(x = t)
dat_all[[m]]<-cbind(x,bcmc_lin[[m]],y_cox,y_tv,y_true)
}     
dat_linear<-dat_all
~~~~~~~~


// 8.4 select better fitting model<p>
for(m in 1:4){
dat_lin<-dat_linear[[m]]
dat_wei<-dat_weibull[[m]]
origin<-beta_post[fan[,1],m][fit_num,]
mse_1<-(dat_lin$bcmc-exp(origin))^2
mse_2<-(dat_wei$bcmc-exp(origin))^2
print(mean(mse_1[,1]))
print(mean(mse_2[,1]))
dat_all[[m]][,2:4]<-ifelse(mse_1<mse_2,dat_lin[,2:4],dat_wei[,2:4])
}
write.csv(dat_all,"~/Desktop/HR_ALL_con.csv")
~~~~~~~~
