1. Extracted  survival time data
///The repeated measurement data are organized into a matrix form of data[[k]], 
///where k represents the time of the initial intervention
cl <- makeCluster(8-1) 
registerDoParallel(cl)
C<-list()
for(kk in 1:(K+1)){#(K+1)
  x<-ifelse(kk<=K,1,0)
data<-data_tran[[kk]]
c_1<-foreach(i = 1:n,
               .combine = rbind,
             .packages = c("dplyr"),
               .errorhandling = "pass") %dopar% {
                 c<-c(rep(0, 6))
                 Time<-c(rep(1, K))
                 s<-c(rep(0, K))
  d<-data[i,]
  sit<-min(which(is.na(d)==FALSE))#if have NA
for(t in sit:(K-1)){
  #survival time t
  Time[t+1]<-ifelse(d[t]==d[t+1],Time[t]+1,1)
  #state transition m
  if ((d[t]==1)&(d[t+1]==2)) {s[t]<-1}
  else if ((d[t]==2)&(d[t+1]==1)) {s[t]<-2}
  else if ((d[t]==1)&(d[t+1]==3)) {s[t]<-3} 
  else if ((d[t]==2)&(d[t+1]==3)) {s[t]<-4}
  else s[t]<-0
  }
  Time<-Time[sit:(K-1)]
  s<-s[sit:(K-1)]
 #chain data
if (any(s!= 0)==TRUE) {#transfer has occurred
    if(last(Time)==1){# Transfer occurred at the last time point
  for(l in 1:(sum(s!= 0))){#sum(s! = 0) denote the number of transitions occurred
    ci<-c(ID=i,y=Time[which(s!= 0)][l],m=s[which(s!= 0)][l],"k"=which(s!= 0)[l],X=x,sigema=1)
    ci<-as.data.frame(t(ci))
    colnames(ci)<-c("ID","y","m","k","X","sigema")
    c<-rbind(c,ci)
  }
    }
    if(last(Time)>1){# No transfer occurred at the last point in time
     for(l in 1:(sum(s!= 0))){
   ci1<-c(ID=i,y=Time[which(s!= 0)][l],m=s[which(s!= 0)][l],"k"=which(s!= 0)[l],X=x,sigema=1)
   ci1<-as.data.frame(t(ci1))
    colnames(ci1)<-c("ID","y","m","k","X","sigema")
   c<-rbind(c,ci1)
     }
    if(last(d)==1|last(d)==2){## The last status is not dead, indicating that there is censoring data
   ci2<-c(ID=i,y=last(Time)-1,m=last(d),"k"=k-sit,X=x,sigema=0)
   ci3<-c(ID=i,y=last(Time)-1,m=last(d)+2,"k"=k-sit,X=x,sigema=0)
   #m=1 in the last time correspond the censoring data of m=1/m=3;m=2 in the last time correspond the censoring data of m=2/m=4 
   ci2<-as.data.frame(t(ci2))
   ci3<-as.data.frame(t(ci3))
    colnames(ci2)<-c("ID","y","m","k","X","sigema")
    colnames(ci3)<-c("ID","y","m","k","X","sigema")
    c<-rbind(c,ci2,ci3)
  }
      if(last(d)==3){
  c<-c
     }
    }
     }#If last(time) is greater than 1 and is not in state 3, then the survival time of the individual in state 1/2 is the censoring data and the survival time is last(time)-1
 if (any(s!= 0)==FALSE) {
  ci<-c(ID=i,y=last(Time)-1,m=last(d),"k"=k-sit,X=x,sigema=0)
  ci<-as.data.frame(t(ci))
    colnames(ci)<-c("ID","y","m","k","X","sigema")
    c<-as.data.frame(rbind(c,ci))
   }

                 return(c)
               }
C_1<-as.data.frame(c_1[which(!c_1$ID==0),])
C_1$y<-ifelse(C_1$y<=56,(C_1$y)/7,(C_1$y)-56+8)
summary(C_1$y)
C[[kk]]<-C_1
}
stopCluster(cl)
dim(C)
write.csv(C,"~/Desktop/C_sample_con.csv")#_con,_var,_norm
～～～～～～～～～～～～～～～

2. BCMC
///estimate dynamic hazard ratios (HRs) in a multi-state Markov modeling framework, 
///which was integrated into a Bayesian regularized Cox survival model.

library(rjags)
install.packages('coda')
library(coda)
library(foreach)
library(iterators)
library(parallel)
library(doParallel)
library(R2jags)
library(coda)
library(lattice)
library(MCMCvis)
# Dimension of vector d is k
a <- 0
d<-int
K<-length(int)
for(j in 2:K){
a[j] <- (d[j-1] + d[j])/2
}
a[j+1] <- d[j] + (d[j] - d[j-1])/2


j<-1
# 1. Load  data
c<-6#c("ID","t","m","j","X","sigema")
m<-4

#2 Bayesian Estimation
C_2<-rbind(C[[j]],C[[K+1]])
l<-c(rep(NA,4))
for(m in 1:4){
l[m]<-length(which(C_2$m==m))
}
row<-max(l)
Y<-c(rep(NA, row*c*m))
dim(Y)<-c(row,c,m)
colnames(Y) <-c("ID","t","m","j","X","sigema")
for(m in 1:4){
  len1<-l[m]
 Y[1:len1,,m]<-as.matrix(C_2[which(C_2$m==m),])
}

m<-4
#"ID","t","m","j","X","sigema"
Y2<-Y[,2,]
Y6<-Y[,6,]
interval<-1

# Construct H[i,j,m] and N[i,j,m]

h<-matrix(0,row,m)
nn<-matrix(0,row,m)
for(m in 1:4){
for(i in 1:l[m]){
h0<- ifelse(Y2[i,m]*interval < a[j],0,1)
aa0<-ifelse(Y2[i,m]*interval > a[j+1],0,1)
h[i,m]<-h0*(min(Y2[i,m]*interval,a[j+1])-a[j])
nn[i,m]<-h0*aa0*delta[i,m]
}
}

Y5<-Y[,5,]
lam<-matrix(0,m,K)
beta<-matrix(0,m,K)
lam1<-lam[,j]
beta1<-beta[,j]

model_string <- textConnection("
  model{
# Likelihood Construction
for(m in 1:4){
for(i in 1:l[m]){
nn[i,m]~ dpois(exp(beta1[m]*(Y5[i,m]))*h[i,m]*lam1[m])
}}

  # Prior for lambdas
lamm <- 10000*(0.01) # exp(-a[2]*0.01) = 0.995
for(m in 1:4){
lam1[m] ~ dgamma(lamm,10000)#j=1
}

# Inferences for the HRs and prior on the betas
# relative hazard
for(m in 1:4){
beta1[m] ~ dnorm(0,0.000001)
}# 
}
")
data_list <- list(l=l,Y5=Y5,h=h,nn=nn)
m<-4
inits <- list(beta1=rnorm(m),lam1=rep(0.1,m))
model <- jags.model(model_string,data = data_list, inits=inits, n.chains=2,n.adapt=1000)
#(4)generate 20000 post-burn-in samples
params <- c("beta1")#,"lam","S.pos","S.neg","S.diff") 
sample <- coda.samples(model,variable.names=params,n.iter=20000, progress.bar="none")#
#(5)Summarize the output
sum<-summary(sample)
beta_post0_con<-cbind(mean=sum[["statistics"]][,1],lwr=sum[["quantiles"]][,1],upr=sum[["quantiles"]][,5])

#～～～～
m<-4
f<-rep(0,m)
e<-rep(0,m)
lam<-matrix(0,m,K)
beta<-matrix(0,m,K)

cl <- makeCluster(n.cores-1) 
registerDoParallel(cl)

beta_post1_con<-foreach(j = 2:K,
               .combine = rbind,
              .packages = c("R2jags","coda","lattice","MCMCvis"),
               .errorhandling = "pass") %dopar% {
#1.data list
lam1<-lam[,j]
beta1<-beta[,j]

C_2<-rbind(C[[j]],C[[K+1]])
l<-c(rep(NA,4))
for(m in 1:4){
l[m]<-length(which(C_2$m==m))
}
row<-max(l)
Y<-c(rep(NA, row*c*m))
dim(Y)<-c(row,c,m)
colnames(Y) <-c("ID","t","m","j","X","sigema")
for(m in 1:4){
  len1<-l[m]
 Y[1:len1,,m]<-as.matrix(C_2[which(C_2$m==m),])
}

m<-4
#"ID","t","m","j","X","sigema"
Y2<-Y[,2,]
Y6<-Y[,6,]
interval<-1

h<-matrix(0,max(l),m)
nn<-matrix(0,max(l),m)
for(m in 1:4){
for(i in 1:l[m]){
h0<- ifelse(Y2[i,m]*interval < a[j],0,1)
aa0<-ifelse(Y2[i,m]*interval > a[j+1],0,1)
h[i,m]<-h0*(min(Y2[i,m]*interval,a[j+1])-a[j])
nn[i,m]<-h0*aa0*delta[i,m]
}
}
a1<-a[j+1]-a[j]
#2.constrcut model
model_string <- textConnection("
  model{
# Likelihood Construction
for(m in 1:4){
for(i in 1:l[m]){
nn[i,m]~ dpois(exp(beta1[m]*(Y1[i,m]))*h[i,m]*lam1[m])
}}

  # Prior for lambdas
lamstar <- 0.05# Select value or set prior for lamstar
w<-0.01
# lamstar ~ dgamma(a,ww) a=0.05*ww ww=0.01
for(m in 1:4){
# prior on baseline hazard bits
f[m] <- w*a1
e[m] <- lamstar*f[m]
lam1[m] ~ dgamma(e[m],f[m])
}

# Inferences for the HRs and prior on the betas
# relative hazard
for(m in 1:4){
beta1[m] ~ dnorm(0,0.000001)
} 
}")
data_list <- list(l=l,Y1=Y1,h=h,nn=nn)
m<-4
inits <- list(beta1=rnorm(m),lam1=rep(0.1,m))
model <- jags.model(model_string,data = data_list, inits=inits, n.chains=2,n.adapt=1000)
#(4)generate 20000 post-burn-in samples
params <- c("beta1")#,"lam","S.pos","S.neg","S.diff") 
#params <- c("HR")
sample <- coda.samples(model,variable.names=params,n.iter=20000, progress.bar="none")#很快2min
# (5) Summarize the output
sum<-summary(sample)
outcome<-as.data.frame(cbind(mean=sum[["statistics"]][,1],lwr=sum[["quantiles"]][,1],upr=sum[["quantiles"]][,5]))#差别不大
return(outcome3)
}
stopCluster(cl)

beta_post_1<-as.data.frame(rbind(beta_post0_con,beta_post1_con))
write.csv(beta_post_1,"~/Desktop/beta_bcmc_con.csv")#_con,_var,_norm
